image:
  repository: koenkk/zigbee2mqtt
  tag: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""
revisionHistoryLimit: 4
hostNetwork: false

timezone: "CET"

config:
  # These will be applied ONLY on first run
  # Home Assistant integration (MQTT discovery)
  homeassistant: false
  # allow new devices to join
  permit_join: true
  # MQTT settings
  mqtt:
    # MQTT base topic for zigbee2mqtt MQTT messages
    base_topic: zigbee2mqtt
    # MQTT server URL
    server: 'mqtt://localhost'
    # MQTT server authentication, uncomment if required:
    # user: my_user
    # password: my_password
  # Serial settings
  serial:
    # Location of USB sniffer
    port: /dev/ttyUSB0
  advanced:
    network_key: GENERATE
    log_output:
      - console


replicas: 1
updateStrategy:
  type: RollingUpdate
  # rollingUpdate:
  #   maxUnavailable: 0
  #   maxSurge: 1

serviceAccount:
  create: true
  annotations: {}
  automountServiceAccountToken: false

podAnnotations: {}
podLabels: {}

extraEnv: {}

extraEnvSecrets:
  # This will set ${MQTT_PASSWORD} to the 'password' key from the 'mqtt' secret
  # MQTT_PASSWORD:
  #   secret: mqtt
  #   key: password

## If you'd like to provide your own Kubernetes Secret object instead of passing your values
## individually, pass in the name of a created + populated Secret.
## All secrets will be mounted as environment variables, with each key/value mapping to a
## corresponding environment variable.
extraSecretForEnvFrom: []
# - zigbee2mqtt-secrets

podSecurityContext:
  privileged: true
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  annotations:
    prometheus.io/scrape: "false"
    prometheus.io/port: 9100
  labels: {}
  type: ClusterIP
  externalIPs: []
  loadBalancerIP: ""
  externalTrafficPolicy: {}
  loadBalancerSourceRanges: []
  publishNotReadyAddresses: false
  httpPort: "8080"
  metricsPort: "9100"
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    annotations:
      prometheus.io/scrape: "false"
      prometheus.io/port: 9100
    labels: {}
    honorLabels: true
    interval: 60s
    selector: {}
    scrapeTimeout: 10s
    scheme: http
    tlsConfig: {}
    relabelings: []
      # - action: replace
      #   regex: ^(.*)$
      #   replacement: $1
      #   separator: ;
      #   sourceLabels:
      #     - __meta_kubernetes_pod_node_name
      #   targetLabel: nodename
    metricRelabelings: []
      # - action: keep
      #   regex: kube_(daemonset|deployment|pod|namespace|node|statefulset).+
      #   sourceLabels:
      #     - __name__
    bearerTokenFile: {}
    # (use long lived access tokens)
    bearerTokenSecret: {}
      # name:
      # key:
      # optional:
livenessProbe:
  enabled: false
  scheme: HTTP
  periodSeconds: 60
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 6
  initialDelaySeconds: 30
readinessProbe:
  enabled: false
  scheme: HTTP
  periodSeconds: 60
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 6
  initialDelaySeconds: 30

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /
  hosts:
    - chart-example.local
  ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
  extraPaths: []
  # - path: /*
  #   backend:
  #     serviceName: ssl-redirect
  #     servicePort: use-annotation
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
#   requests:
#     cpu: "1"
#     memory: "256Mi"
#   limits:
#     cpu: "1"
#     memory: "512Mi"

nodeSelector:
  kubernetes.io/hostname: {}
affinity: {}
tolerations: []

persistence:
  enabled: false
  annotations: {}
  ## zigbee2mqtt data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: zigbee2mqtt-data
  accessMode: ReadWriteOnce
  size: 1Gi
