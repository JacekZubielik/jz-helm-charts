apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "app.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "app.name" . }}
    helm.sh/chart: {{ include "app.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit:  {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "app.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: {{ .Values.strategyType }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "app.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      {{- with .Values.image.PullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
      shareProcessNamespace: {{ .Values.sidecarSingleProcessNamespace }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      securityContext:
      {{- toYaml .Values.securityContext | nindent 8 }}
      {{- if .Values.hostNetwork }}
      hostNetwork: {{ .Values.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
          - name: api
            containerPort: {{ .Values.service.httpPort }}
            protocol: TCP
          - name: metrics
            containerPort: {{ .Values.service.metricsPort }}
            protocol: TCP
        {{- range .Values.service.additionalPorts }}
          - name: {{ .name }}
            containerPort: {{ .targetPort }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          tcpSocket:
            # path: /ping
            port: {{ .Values.service.metricsPort }}
            # scheme: {{ .Values.livenessProbe.scheme }}
          periodSeconds:  {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          tcpSocket:
            # path: /ping
            port: {{ .Values.service.metricsPort }}
            # scheme: {{ .Values.livenessProbe.scheme }}
          periodSeconds:  {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          tcpSocket:
            # path: /ping
            port: {{ .Values.service.metricsPort }}
            # scheme: {{ .Values.startupProbe.scheme }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
        {{- end }}
        env:
        {{- range $key, $value := .Values.extraEnv }}
        - name: {{ $key | }}
          value: {{ $value | }}
        {{- end }}
        {{- range $name, $opts := .Values.extraEnvSecrets }}
        - name: {{ $name }}
          valueFrom:
            secretKeyRef:
              name: {{ $opts.secret }}
              key: {{ $opts.key }}
        {{- end }}
        envFrom:
        {{- range .Values.extraSecretForEnvFrom }}
        - secretRef:
            name: {{ . }}
        {{- end }}
        resources:
        {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        - mountPath: /config
          name: config
        {{- range .Values.hostMounts }}
        {{- if .mountPath }}
        - mountPath: {{ .mountPath }}
        {{- else }}
        - mountPath: {{ .hostPath }}
        {{- end }}
          name: {{ .name }}
        {{- end }}
        {{- if .Values.extraVolumeMounts }}{{ toYaml .Values.extraVolumeMounts | trim | nindent 10 }}
        {{ end }}
      volumes:
        - name: config
        {{- if .Values.persistence.enabled }}
          {{- if .Values.persistence.hostPath }}
          hostPath:
            path: {{.Values.persistence.hostPath}}
          type: Directory
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "app.fullname" . }}
            {{- end }}
        {{- end }}
        {{- else }}
          emptyDir: {}
        {{ end }}
        {{- range .Values.hostMounts }}
        - name: {{ .name }}
          hostPath:
            path: {{.hostPath}}
            {{- if .type }}
            type: {{ .type }}
            {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
